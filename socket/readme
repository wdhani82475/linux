


1.服务器信息固定下来，服务器去连接客户端‘

2.客户端连接服务器时，客户端应该有服务器的信息

man setsockopt

客户端的ip不变化，但是端口号 是变化的。

setsockopt()----设置地址重用

connfd=accept(sockSer,(struct sockaddr*)&addCli,&len);//1.当位于while循环成立时，说明是一个客户端,while(1){}不停地通讯
															
													//当位于while(1)循环时，说明产生不同connfd,客户端和服务器通讯,下一次客户端的connfd会覆盖之前的。并始终和最新的客户端通信。
													recv()和send()函数都为阻塞函数。
===========================================
TCP||
=====
1.一个客户端和服务器进行（创建一个唯一的connfd）,然后进行收发数据 (socket/01) ||一句一句通信
2.不同的客户端和服务器进行通信，只能通信一次，不会和之前的进行通信，因为accept()为阻塞函数，始终等待新的connfd,若没有时，会进行阻塞（/socket/02）||一句一句通信
============================================
UDP||
===
1.服务器可以和不同的客户端通信，由于recvfrom()和sendto()都为阻塞函数。因此服务器会一一的按顺序和客户端通信。(/socket/udp)
===========================================
可以利用多进程和多线程实现独立的客户端和服务器通信。
||。大数计算，利用多进程和多线程，实现并发执行，互不影响。客户端把数据发给服务器，让服务器处理后发给客户端。




=================================================================================================================================	Tcp
=================
||	ser:socket() bind() listen() accept()
||
||	cli:socket() connect() conncet()

============================================ accept() 为阻塞函数
Udp:客户端先发送数据，为了使服务器获得通信的ip和端口号
============================================ recvfrom() sendto() 为阻塞函数
||ser:socket() bind() recvfrom()/sendto()   
||
||cli:socket() recvfrom() sendto()

bind:只是将地址族和套接字进行绑定。
=======================================================================
int start_up(char *ip,int port,int mode) (/socket/03) ./ser 192.168.1.2 9090
sockSer=start_up(argv[1],atoi(argv[2]),TCP);
============================

Clent	IP: inet_addr();
		PORT:ntohs(); 



2017/11/21
1.多进程、多线程、线程池的网络编程。



